@namespace("org.bdgenomics.affymetrixformats.avro.dat")
protocol DatFormatProtocol {


/**
 A structure that defines coordinates of a point. 
 The contents of the structure are two SHORT (16-bit integer) values describing 
 the X and Y values of the coordinate.
 */
record Point {
  union { null, int }  x = null;
  union { null, int }  y = null;
}


/**
 A structure that defines coordinates of a point generated by the Command Console. It uses float instead of integer values. 
 */
record PointCC {
  union { null, float }  x = null;
  union { null, float }  y = null;
}


/**
 A Grid generated by the Command Console. It uses float instead of integer for coordinates. 
 */
record GridCC {
  /** The status of the grid. OK=1, Error=2, Manual Adjust=4.   */
  union { null, int }     status = null;
  /** Coordinates of the grid's 4 corners in this order: upper left, upper right, lower right, lower left.   */
  array <PointCC>         points = [];
}


/**
 The DAT file contains pixel intensity values collected from an Affymetrix 
 scanner.
 
 The Data_v1 record is generated by the MAS and GCOS 1.x software.
 
 @url http://media.affymetrix.com/support/developer/powertools/changelog/gcos-agcc/dat.html
 */
record Dat_v1 {
  /** Type of file, must be 0xFC.   */
  union { null, int }     fileType = null;
  
  /** Number of pixels per line.   */
  union { null, int }     nbPixelsPerLine = null;
  
  /** Number of lines in the image.   */
  union { null, int }     nbLines = null;
  
  /** The total number of data points (pixels) in the image.   */
  union { null, long }    totalPixels = null;
  
  /** Minimum pixel value in the image.   */
  union { null, long }    minPixelValue = null;
  
  /** Maximum pixel value in the image.   */
  union { null, long }    maxPixelValue = null;
  
  /** Mean pixel value.   */
  union { null, double }  avgPixelValue = null;
  
  /** Standard deviation of the pixel values   */
  union { null, double }  stdevPixelValue = null;
  
  /** Number of pixels per row (padded with spaces), preceded with "CLS=".   */
  union { null, string }  nbPixelsPerRow = null;
  
  /** Number of rows in the image (padded with spaces), preceded with "RWS=".   */
  union { null, string }  nbRows = null;
  
  /** Pixel width in micrometers (padded with spaces), preceded with "XIN="   */
  union { null, string }  pixelWidth_um = null;
  
  /** Pixel height in micrometers (padded with spaces), preceded with "YIN=".   */
  union { null, string }  pixelHeight_um = null;
  
  /** Scan speed in millimeters per second (padded with spaces), preceded with "VE=".   */
  union { null, string }  scanSpeed_mmps = null;
  
  /** Temperature in degrees Celsius (padded with spaces). If no temperature was set then the entire field is empty.   */
  union { null, string }  temperature_c = null;
  
  /** Laser power in milliwatts or microwatts (padded with spaces.   */
  union { null, string }  laserPowerWatt = null;
  
  /** Date and time of scan (padded with spaces).   */
  union { null, string }  scanDateTime = null;
  
  /** There are several sub-fields in this field. The first sub field is the scanner ID, sometimes  followed by a number, followed by three spaces. If the scanner ID is absent, the field consists of four spaces.   */
  union { null, string }  scannerId = null;
  
  /** Next are 10 structured comment fields. Each field is preceded by the delimiter 0x14 and a space. The field is followed by a space and 0x14. Only field two is valid, the other 9 fields are obsolete. Field 2 contains the probe array type, followed by .1sq. The 1sq extension is also obsolete.   */
  union { null, string }  deprecatedMetadata = null;
  
  /** Field 2 contains the probe array type.   */
  union { null, string }  probeArrayType = null;
  
  /** Next (after the last structured field) there is the chip orientation preceded by a space.
      The rest of the field is filled with nulls (zeros).   */
  union { null, string }  chipOrientation = null;
  
  /** Average DC Offset of the scanner for this image.   */
  union { null, double }  avgDCOffset = null;
  
  /** Standard deviation of the average DC offset.   */
  union { null, double }  stdevDCOffset = null;
  
  /** Number of samples taken in determining the DC offset.   */
  union { null, long }    nbSamplesDCOffset = null;
  
  /** Coordinates of the grid's 4 corners in this order: upper left, upper right, lower right, lower left.   */
  array <Point>           gridPoints = [];
  
  /** Cell margin used for computing the cells intensity value.   */
  union { null, int }     cellIntensityMargin = null;
  
  /** Name of the experiment padded with nulls.   */
  union { null, string }  experimentName = null;
  
  /** The pixel intensity data is stored following the header at byte 512. Intensity values are stored as 16 bit unsigned integer values. Data is stored by rows.   */
  array <int>             values = [];
}



/**
 The DAT file contains pixel intensity values collected from an Affymetrix 
 scanner.
 
 The Data_cc record is generated by the Command Console software. This is stored
 in the Command Console "generic" data file format.
 
 The data type identifier is set to "affymetrix-calvin-scan-acquisition".
 
 @url http://media.affymetrix.com/support/developer/powertools/changelog/gcos-agcc/dat.html
 @url http://media.affymetrix.com/support/developer/powertools/changelog/gcos-agcc/generic.html 
 */
record Dat_cc {
  /** The probe array type.   */
  union { null, string }  probeArrayType = null;
  /** The pixel size.   */
  union { null, string }  pixelSize = null;
  /** The scanner type. e.g. M10 for the GCS3000 high resolution scanner.   */
  union { null, string }  scannerType = null;
  /** The scanner ID   */
  union { null, string }  scannerId = null;
  /** The date of the scan.   */
  union { null, string }  scanDate = null;
  /** The number of rows of pixels.   */
  union { null, string }  nbPixelsPerRow = null;
  /** The number of columns of pixels.   */
  union { null, string }  nbPixelsPerColumn = null;
  /** DAT header string without min and max intensity. Present if this is a native Command Console DAT file.   */
  union { null, string }  partialDatHeader = null;
  /** Max pixel intensity.  Present if this is a native Command Console DAT file.   */
  union { null, string }  pixelIntensityMax = null;
  /** Min pixel intensity. Present if this is a native Command Console DAT file.   */
  union { null, string }  pixelIntensityMin = null;
  /** Full DAT header string.  Present if this is a DAT file converted from GCOS.   */
  union { null, string }  fullDatHeader = null;
  /** A code indicating the orientation of the image.   */
  union { null, string }  imageOrientation = null;
  /** File version.   */
  union { null, string }  fileVersion = null;
  /** Indicates if the image has been flipped about the y-axis.   */
  union { null, string }  isImageFlippedYAxis = null;
  /** A GUID that identifies the array.   */
  union { null, string }  arrayGUID = null;
  /** The array barcode.   */
  union { null, string }  arrayBarcode = null;
  
  
  /** The intensity values for each pixel.   */
  array <int>             values = [];
  /** The maximum pixel value.   */
  union { null, int }     statsPixelIntensityMax = null;
  /** The minimum pixel value.   */
  union { null, int }     statsPixelIntensityMin = null;
  
  
  /** The GlobalGrid   */
  union { null, GridCC }  globalGrid = null;
  /** Subgrid. TODO: how to find out how many subgrids there is.   */
  array <GridCC>          subgrids = [];
}

}